Day 3 Java

Types of softwares/applications:

1.Desktop or standalone softwares/apps
They are standalone in nature, need to install them in every machine.
Ex: O.S, Ms office, paint, notepad, eclipse, browser, anti virus


2. Web Applications
These are the applications run on web services like(Tomcat,Jboss,weblogic..) and accessible by clients through internet.
Ex: Any website is web app, flipkart,facebook

Web Apps : State gov websites, university websites
Enterprise Apps: google,amazon,banking apps

3. Mobile Applications
Whtasapp, facebook,tiktok




jar(java archive) file is delivered to customer(it will consist of all .class files)

war(web archive)


.class file generated by windows compiler can be understood by mac jvm 

.java converted to .class by javacompiler(javac) and then converted to bytecode by jvm

JVM responsible for memory allocation,running programs, creating objects
.class files are intermediate which allows platform independence


============================================
Java Naming Conventions

package
-------
lower case
ex. demo,com.demo, java.lang, java.util, abc

syntax:-  domainname.companyname.module.submodule;

          com.hexaware.metrorail.passengers.tickets;


Class/Interface
-------------------
Init Cap(starting letter capital)
Ex: Student, Demo, Object, String, Employee

Only class will have constructor(Constructor name same as class name and no return concept is there)
---------------
Init Cap
Ex: Student(), Object(), String()


methods/variable:
---------------------
camelCase
Ex: amount, studnet, amountDetails, studentDetailsNow, getName(), hello()
    abc_123$, 



final variables:
-----------------------
Block letter(Completely upper case)

Ex: IFSC, TOKEN_NUMBER



Data Types:
--------------

primitive datatypes
-----------------------------
byte  1 byte(-2pow7 to 2pow7-1  -128 to 127)
short 2 bytes    // default for numeric dattypes is 0 or 0.0
int   4 bytes  (-2pow31 to 2pow31-1)
long  8 bytes
char   2 bytes   // char default value is single space
float  4 bytes
double 8 bytes
boolean 1 bit    // boolean default value is false


reference datatypes / non primitive datatypes
--------------------------------------
String s1;
Employee e1;      // non primitive default for all is null


In java we should and must write code either inside class or interface


Static block can be executed without main method and are executed before main method but they have to be written inside class.
static{}  Static blocks cannot be written inside main method


Difference b/w jdk and jre

jdk--java development toolkit(javac,jvm,other files)

jre--java runtime environment

jdk is like bike and jre is engine or like processor in laptop




if we do wxplicit type casting for leys say byte the range is -128 to 127
but if we do 
byte b=(byte) 130;  // here -126 will be displayed as in the form of a clock cycle after 127 comes -128 then -127 and then -126 
 
=======================================================
Types of variable based on scope

1. Local variable...................................  
declared inside any method or declared as parameters 
Local variable can be accessed within the given block
local variable should be initialized by developers jvm does not do it
cannot be static

2. instance variable..................... 
inside clas outside method not declared as static 
Scope depends on access mofifier(default, private,etc)
JVM is responsible to initialize
it is instance specific

3. static variable................................  
staic variables, methods, inner class, block are known as static members.
In java first memory allocation will be done for static members by jvm
Static members get memory allocation during class loading.
declared static cannot be local and are shared among all instance

Static members can be accessed in two ways
i. by using class name 
ii. by using class object/reference


Wrapper Class
Byte, Short, Character, Integer, Long, Float, Boolean, Double

syso(Integer.MAX_VALUE+" to "+Integer.MIN_VALUE);




====================================================

Class:..........................
It is a reusable component in Java 
It is imaginary in nature
All types of classes will have constructor
Ex: Fruits, Animals, Vegetables


Object...................
It is a physical entity of class which exists in this world
Ex: Apple, Potato,Dog


Object oriented is done so we can relate program to real world entities





Jvm architecture in book


Static Non Ststic access.......................

non static ---> static    not allowed directly but with help of reference var/obj

static---> non static   can be accessed directly using reference is optional


Constructor..............................
special methods invoked by jvm to create instance/object of given class

In java when we dont write any constructor then only compiler will add/write implicit default constructor

In every constructor first line is super() which calls constructor of immediate parent( In default case when compiler writes the default constructor it refers Object() )
If user writes any constructor then compiler dont do anything


public class Object(){
public Object(){
//create instances for refer class
//generate hashcode
//creating copy of instance variables
//initializing default values
//memory alloocation etc
}

equals(){//it can compare references of 2 diff objs}
hashcode(){// it returns hashcode in integer format}

String tostring(){// it return hexadecimal hashcode in string format pkf.class.@12345dt5}

}



Wrapper class..................................................

The main objectives of wrapper classes are: 
• To wrap primitives into object form so that we can handle primitives also just like 
objects. 
• To define several utility functions which are required for the primitives. 
Integer a=new Integer(10);
Integer a=new Integer("10");  //both are valid but if the string is not correctly formatted then we will get number format exception

All wrapper classes have inbuilt methods of valueOf(),
 parseXxx()  [used for converting string to primitive  ]
xxxValue()[i.intvalue(),i.shortvalue()]
toString used for coverting primitive to string 


OOPS: .....................................................
1. Inheritance
2. Polymorphism
3. Encapsulation
4. Abstraction


Inheritance
=========================================
It is a concept where one class/interface can access another class/interface to access properties from parent/super class to the child class

We can achieve code reusability using inheritance

Inheritance takes place only between same types.(class inherit class,interface inherits interface)



===========================================
Access Modifiers

1. private- within a file/program/class
2. default- within a package all classes can accsess
3. public- global anywhere
4. protected- act as default and accessible within package
acts as public and accessible in other packages where child class exists

===========================================
Polymorphism

many forms

one entity behaves differently in different places/scenarios is concept of polymorphism
EX: one person act as employee in office

i. Compiletime/Static 
Ex: method overloading, constructor overloading, operator overloading

ii. Runtime/dynamic

Example1: method overiding
======================================================================================================================
Example 2: any parent class ref variable can hold its child class object becuse of runtimr polymorphism               ||

Parent p=new Child();                                                                                                 ||

Child c= new Parent();  //this is not possible                                                                        ||
=======================================================================================================================

Now for primitive return type both parent and child methods should have same datatype

But for reference variable the overriding method can have same return type or smaller/child return type 


===========================================
Encapsulation
Binding or wrapping data and data members into single unit


================================================
Abstraction: (Data Hiding+ Encapsulation)

highlighting set of services to user and hiding implementation code from user is known as abstraction.

It is achieved using interfaces and abstract classes

=================================================================
Interface: 
In interface all methods are public abstract by default
========================================================================


===================================================================================
Collections: Framework used for storing group objects consists of many interfaces like
List
Map
Set
Queue

1.List-- Maintains insertion order , allows duplicate, allows null...........................................

i. Array List: 
dynamic array
can store heterogenous
non synchronized
better for traversal and retreival but not as good as linked list when it comes to insertion and deletion linked list has better performance 
non synchronous(multiple threads allowed)

ii. Linked List:
internally used doubly linked list
better for frequent insertion and deletion
non synchronous(multiple threads allowed)
 Usually we can use LinkedList to implement Stacks and Queues to provide support for 
this requirement LinkedList class defines the following 6 specific methods. 
1) void addFirst(Object o); 
2) void addLast(Object o); 
3) Object getFirst(); 
4) Object getLast(); 
5) Object removeFirst(); 
6) Object removeLast(); 
• We can apply these methods only on LinkedList object. 



iii.Vector
Legacy class
synchronous only one thread allowed
slower as compared to Arraylist and LL


2. Set.............................................................

i. HashSet 
No duplicates
null allowed


ii.Linked HashSet
only difference is internally it uses hashtable and linked list and it maintains insertion order


iii. TreeSet
Only maintains ascending insertion order
null not allowed
only comparable data allowed and homogenous



3. Map...........................................................................
key value pairs are known as entries
maps cant be traversed so they are converted to entrysets or keysets


i. HashMap
key value pairs
only unique keys allowed
one null key allowed
non synchronized Hashtable is synchronized
no insertion order Linked hashmap maintains it


ii. TreeMap
maintains ascending order according to keys
no null key allowed




==========================================================
Generics <> used in collections to define the type of data to be held in the collection so as to avoid further Class Cast exceptions and explicit typecasting
So using generics one collection can store only one type of data.
ArrayList<String> ar=new ArrayList<String>();







learn today practice thoroughly
fundamentals of java
oops concepts, string, arrays, basics of collections(list,set,map)

read and analyze case studies






 

